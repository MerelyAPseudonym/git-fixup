#!/bin/bash

SUBDIRECTORY_OK=yes
. "$(git --exec-path)/git-sh-setup"

grok_diff='s:^--- \(a/\)*\(.*\):--- \2:p  ; s/^@@ -\([0-9]*\),\([0-9]*\).*/\1 \2/p'

function fixup_candidates_lines () {
    git diff --cached -U1 | sed -n "$grok_diff" | (
        file=''
        while read offs len; do
            if test "$offs" == '---'; then
                file="$len"
            else
                if test "$len" != '0'; then
                    if test "$file" != '/dev/null'; then
                        git blame -sl -L "$offs,+$len" HEAD -- "$file" | sed "s/^^//g"
                    fi
                fi
            fi
        done
    ) | cut -d' ' -f 1 | sort -u
}

function fixup_candidates_files () {
    git diff --cached --name-only | (
        while read file; do
            git log -n 1 -- $file | head -1
        done
    ) | cut -d' ' -f 2 | sort -u
    return
}

function is_local_sha () {
    if test "$1" = ""; then
        return 1
    fi
    if test "$local_shas" = ""; then
        return 0
    fi
    echo "$local_shas" | grep -q $1
    return $?
}

function is_lines_sha () {
    echo "$lines_shas" | grep -q $1
    return $?
}

function print_sha () {
    local sha=$1
    local type=$2
    printf "%s " "$sha"
    printf "%s " "$type"
    echo -n `git cat-file -p "$sha" | sed -n '/^$/{n;p;q}'`" "
    git cat-file -p "$sha" | sed -n '/^committer/{p;q}' | sed -e "s/.*</</g" -e "s/>.*/>/g"
}

if test $# -eq 1; then
    git rev-parse --verify "$1" > /dev/null || exit 1
    git commit -m "fixup! $1";
    exit 0
fi


cd_to_toplevel
local_shas=`git cherry -v 2>&1`
if test "$?" != 0; then
    local_shas=""
else
    local_shas=`echo "$local_shas" | cut -d' ' -f 2`
fi

lines_shas=`fixup_candidates_lines`
files_shas=`fixup_candidates_files`
echo "$lines_shas" | while read sha; do
    if is_local_sha $sha; then
        print_sha $sha [L]
    fi
done
echo "$files_shas" | while read sha; do
    if is_local_sha $sha && ! is_lines_sha $sha; then
        print_sha $sha [F]
    fi
done
